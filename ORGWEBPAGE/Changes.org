#   -*- mode: org; fill-column: 65 -*-

#+begin_html
<a href="/"><img src="http://orgmode.org/img/org-mode-unicorn.png" class="logo-link" /></a>
#+end_html

#+STARTUP: indent hidestars

* Version 6.33
 :PROPERTIES:
 :VISIBILITY: content
 :CUSTOM_ID: v6.33
 :END:

** Incompatible changes

*** Reorganize key bindings for archiving
    
The following keys now do archiving

- C-c C-x C-a :: archive using the command specified in
     =org-archive-default-command=.  This variable is by default
     set to =org-archive-subtree=, which means arching to the
     archive file.
    
The three specific archiving commands are available through

- C-c C-x C-s ::    archive to archive file
- C-c C-x a ::     toggle the archive tag
- C-c C-x A ::   move to archive sibling

These bindings work the same in an Org file, and in the agenda.

In addition:
    
- In the agenda you can also use =a= to call the default archiving
  command, but you need to confirm the command with =y= so that this
  cannot easily happen by accident.
  
- For backward compatibility, =C-c $= in an org-mode file, and
  =$= in the agenda buffer continue to archive to archive file.


** Details

*** Level indentation cycling new empty entries and plain list items
:PROPERTIES:
:ID: 1CBF16C9-031C-4A03-A5EE-09B6AAB6209C
:END:

To speed up data entry, TAB now behaves special in an empty
headline, i.e. if the current line only contains the headline
starter stars, maybe a TOD keyword, but no further content.  This
is usually the situation just after creating a new headline with
=M-RET= or =M-S-RET=.

Then, TAB will first make the current entry a child of the
entry above, then a parent, then a grand parent etc until it
reaches top level.  Yet another TAB and you will be back at the
initial level at which the headline was created.

New plain list items behave in just the same way.

Sounds strange?  Try it, it is insanely fast when entering data.
If you still don't like it, turn it off by customizing
=org-cycle-level-after-item/entry-creation=.

Thanks to [[http://thread.gmane.org/gmane.emacs.orgmode/18236][Samuel Wales]] and [[http://thread.gmane.org/gmane.emacs.orgmode/18447/focus%3D19015][John Wiegley]] for ideas that
contributed to this new feature.

*** Speed commands at the start of a headline

If you set the variable =org-use-speed-commands=, the cursor
position at the beginning of a headline (i.e. before the first
star) becomes special.  Single keys execute special commands in
this place, for example outline navigation with =f=, =b=, =n=,
and =p=, equivalent to the corresponding =C-c C-f=, =C-c C-b=,
=C-c C-n=, and =C-c C-f= commands.  The full list of commands can
be seen by pressing =?= at the special location.  More commands
can be added and existing ones modified by configuring the
variable =org-speed-commands-user=.

This was a request by John Wiegley, based on similar speed
navigation in /allout.el/.

*** Logging changes in scheduling and deadline time stamps

Setting the variables =org-log-reschedule= and
=org-log-redeadline= to either =time= or =note= will arrange for
recording a logbook entry whenever a scheduling date or deadline
is changed.

This was a request by Rick Moynihan.

*** File remember notes into a date tree

Remember notes can now be filed to a location in a date tree.  A
date tree is an outline tree with years as top levels, months as
level 2 headings, and days as level three headings.  These are
great for journals and for recording appointments and other loose
dates because it will be easy to find all entries referencing a
particular date, and it will be easy to archive all such entry
from last year, for example.

To select date tree filing, set the HEADLINE part of the remember
template to the symbol =date-tree=.  The date tree will be build
in the file on top level.  However, if the file contains an entry
with a non-nil =DATE_TREE= property, then the tree will be build
under that headline.

*** New commands to create entries from agenda and calendar

If you make the variable =org-agenda-diary-file= point to an
org-mode file, the =i= key in both the agenda buffer and in the
Emacs calendar will be made to insert entries into that Org file.
The dates at the cursor and the mark are being used when making
entries for specific dates or blocks.  In the new file,
anniversaries will be collected under a special headline, and
day/block entries will be filed into a date tree (see previous
section).

This was a request by Stephen Eglen.

*** A new freemind exporter has been integrated with Org-mode

org-freemind.el has a number of entry points (for details, see
the source code), but you can also use Org's =C-c C-e m= to
export a file or a selected subtree.

Thanks to Lennart Borgman for this contribution.  An earlier
version of this file was part of the nxhtml package, under the
name /freemind.el/.

*** Drawers are now exported properly

Drawers are now exported when the configuration requires it,
i.e. if the variable `org-export-with-drawers' is t or a list
containing the drawers to export.

*** Min/Max/Mean age operators in Column View.
    
This lets you see how much time has passed since the specified
timestamp property each entry. The three operators (=@min=,
=@max=, =@mean=) show either the age of the youngest or oldest
entry or the average age of the children.

Thanks to James TD Smith for a patch to this effect.
    
*** Allow source code block indentation to be preserved
    
If =org-src-preserve-indentation= is non-nil, or if a block has a
=-i= switch, then the behavior of org-exp-blocks is altered as
follows:

1. Indentation is not removed before passing the block contents
   to the block-transforming plugin.
   
2. The result returned by the plugin is not re-indented.

3. Editing the source code block with =C-c '= preserves it's
   indentation.

Thanks to Dan Davison for this feature.

*** Frame/window control when switching to source code edit buffer.
    
When switching to a source code editing buffer with =C-c '=, you
can now control the frame / window setup using the new variable
=org-src-window-setup=.

Thanks to Dan Davison for this feature.

*** Refile an entry to the current clock

You can now quickly refile an entry to become a child of the
entry currently being clocked.  The keys for doing this are
=C-2 C-c C-w=.

This was a request by Bernt Hansen.

*** Make =C-c C-o= open the attachment directory is there are no links

If there is no link in an entry, =C-c C-o= will now open the
attachment directory instead.

This was a request/patch by John Wiegley.

*** org-mac-iCal.el: work with calendar "groups"
    
Some calendar systems (Google, Zimbra) handle subscriptions to
multiple calendars (or to an account) by grouping them under a
single caldav directory in the calendar tree.  org-mac-iCal used
to assumes there is only one ics file created per caldav
directory, so while it *creates* all of the needed merged ics
files, it only copies one of them to ~/Library/Calendar before
importing the contents into the diary.

Thanks to Doug Hellmann for a patch to fix this.

*** New module /org-learn.el/ in the contrib directory

The file implements the learning algorithm described at
http://supermemo.com/english/ol/sm5.htm, which is a system for reading
material according to "spaced repetition".  See
http://en.wikipedia.org/wiki/Spaced_repetition for more details.

Thanks to John Wiegley for this contribution.

*** New contributed package /org-git-link.el/

/org-git-link.el/ defines two new link types. The =git= link type
is meant to be used in the typical scenario and mimics the =file=
link syntax as closely as possible.  The =gitbare= link type
exists mostly for debugging reasons, but also allows e.g.
linking to files in a bare git repository for the experts.

Thanks to Raimar Finken for this contribution.

*** /org-annotation-helper.el/ and /org-browser-url.e./ have been removed
Please switch to /org-protocol.el/, into which contains the same
functionality in a more general framework.
*** The contributed /org-export-freemind/ package has been removed.
Org now contains a new freemind exporter, /org-freemind.el/.

** Org-babel Changes
- Clojure is supported [Thanks to Joel Boehland]
- Perl is supported
- Ruby and Python now respond to the :file header argument
- Added :results_switches header argument for passing switches
  through to raw src blocks
- Preserve indentation in source blocks on export and tangle
- Possible to evaluate noweb reference on tangling or code block
  evaluation
- Allowing multiple noweb references on a single line
- Cleaned up the passing of parameter values from Org-babel to
  language specific functions

* Version 6.32
 :PROPERTIES:
 :CUSTOM_ID: v6.32
 :END:

** Rewrite of org-mobile.org, for MobileOrg 1.0 (build 20)

MobileOrg is currently under review at the iPhone App Store.  You
will need Org-mode version 6.32 to interact with it.

** Added support for habit consistency tracking
    
/org-habit.el/ contains new code to track habits.  Please
configure the variable org-modules to activate it.  When active,
habits (a special TODO entry) will be displayed in the agenda
together with a "consistency graph".  Habit tracking is described
in a new [[http://orgmode.org/manual/Tracking-your-habits.html][manual section]].

Thanks to John Wiegley for this contribution.
    
** New context-aware tag auto-exclusion 

After writing a function relating to location and context
information, you will be able to press =/ RET= in the agenda to
exclude tasks that cannot be done in the current context. 
For details, see the information about filtering in the manual.

Thanks to John Wiegley for a patch to this effect.

** New clock resolving tools

When clocking into a new task while no clock is running, Org now
checks for orphaned CLOCK lines and offers to repair these before
starting the clock.  You can also configure this feature to check
for idle time and prompt you to subtract that time from the
running timer.
    
See the new [[http://orgmode.org/manual/Resolving-idle-time.html][manual section]] for more details.
    
Thanks to John Wiegley for a patch to this effect.

** Mutually exclusive tag groups can now have a name in the tags interface

The customize interface allows to optionally add a string to the
beginning or end of such a group.
    
Thanks to James TD Smith for a patch to this effect.

** Agenda Search view: Search for substrings
    
The default in search view (/C-c a s/)is now that the search
expression is searched for as a /substring/, i.e. the different
words must occur in direct sequence, and it may be only part of
a word.  If you want to look for a number of separate keywords
with Boolean logic, all words must be preceded by =+= or =-=.

This was, more-or-less, requested by John Wiegley.

** Make space and backspace scroll the show window in the agenda

Pressing SPC again after using it to show an agenda item in
another window will make the entire subtree visible, and show
scroll it.  Backspace and DEL will scroll back.

This was a request by Eric Fraga.
    
** File tags are now offered for completion during a tag prompts

Requested by Matt Lundin.

** Make `- SPC' an agenda filter that selects entries without any tags
    
Request by John Wiegley.

** Better way to edit multi-line macro definitions

The editing tool key =C-c '= now also edits =#+MACRO=
definitions, including multiline macros.

** Restructured Manual

The manual has been slightly reorganized.  The archiving stuff,
which was - somewhat obscurely - hidden in the /Document
Structure/ chapter, has been moved into the new chapter
/Capture-Refile-Archive/.  Also, there is a new chapter /Markup/
which contains both the markup rules (moved there from the Export
chapter) and the documentation for embedded LaTeX.

** Improved figure placement in LaTeX and HTML export
    
Text can now be wrapped around figures.  See the manual for
details.

** Allow date to be shifted into the future if time given is earlier than now
    
By setting

:     (setq org-read-date-prefer-future 'time)

you indicate to Org that, if you only give a time at the
date/time prompt, and if this time is earlier then the current
time, then the date of tomorrow will be assumed to be valid for
this event.  A similar mechanism was already in place for dates,
but now you can make it work for times as well.

** Collected changes in org-babel
- Source blocks can now reference source-blocks in other files
  using =filepath:srcname= syntax.
- Inline code blocks like =src_python{2+2}= are now exported
- Remote source block calls using the =#+lob: srcname(arg=val)=
  syntax can now be exported.
- When =:file= is supplied with an =R= block, graphics are
  automatically sent to file and linked from the org buffer, thus
  appearing on export.  The image format is obtained from the
  filename extension.  Possible values are =.png, .jpg, .jpeg,
  .tiff, .bmp, .pdf, .ps, .postscript=, defaulting to =png=.
- Results can be returned as parseable code using =:results code=,
  and as pretty-printed code using =:results pp= (emacs-lisp,
  python, ruby).  Thanks to Benny Andresen for the idea and patch
  for emacs-lisp.
- When =:file filename= is supplied, =:exports file= is unnecessary
- Header args are taken from org-file-properties in addition to
  properties active in the subtree.
- =:noweb= header argument now expands noweb references before
  source-block evaluation.
- Tangling honours the new org variable
  org-src-preserve-indentation, so that correct code is output for
  a language like python that depends on indentation.

** Changes in org-exp-blocks.el
- Interblocks export has been simplified.
- Support for R code (=begin_R= blocks and inline =\R{}=) has been
  removed.  Please use org-babel instead.

* Version 6.31
 :PROPERTIES:
 :CUSTOM_ID: v6.31
 :END:

** Org-babel is now part of the Org distribution

Org-babel provides the ability to execute source code in many
different languages within org-mode documents.  The results of
code execution -- text, tables and graphics -- can be integrated
into Org-mode documents and can be automatically updated during
publishing.  Since Org-babel allows execution of arbitrary code,
the range of tasks that can be addressed from within an Org mode
file becomes very large.  Examples of ways in which Org-babel
might be used include

- Documenting a task that involves some programming so that it is
  automatically repeatable
- Creating dynamic (executable) reports that respond to changes
  in the underlying data (Reproducible Research)
- Exportation of code contained in an Org-mode document into
  regular source code files (Literate Programming)

Additionally, Org-babel provides a programming environment within
Org files, in which data can be transmitted between parameterised
source code blocks in different languages, as well as between
source code blocks and Org-mode tables.

A simple API is defined so that users can add support for new
"languages" (broadly construed).  Languages currently supported
are:

- asymptote
- css
- ditaa
- dot
- emacs-lisp
- gnuplot
- haskell
- ocaml
- python
- R
- ruby
- sass
- sh
- sql

Org-babel was designed and implemented Eric Schulte with continued
significant help on both accounts from Dan Davison.

** MobileOrg support

Richard Morelands iPhone/iPod Touch program [[http://mobileorg.ncogni.to/][MobileOrg]] can view
Org files, mark entries as DONE, flag entries for later
attention, and capture new entries on the road.  Org-mode has now
support to produce a staging area where MobileOrg can download
its files, and to integrate changes done on the phone in a half
automatic, half interactive way.  See the new appendix B in the
manual for more information.


** Indented lines starting with "#+ " are treated as comments

To allow comments in plain lists without breaking the list
structure, you can now have indented comment lines that start
with "#+ ".

** New STARTUP keyword `showeverything'
    
This will make even drawer contents visible upon startup.
Requested by Jeff Kowalczyk.

** New contributed package org-invoice.el

This package collects clocking information for billing
customers.

Thanks to Peter Jones for this contribution.

** Encrypting subtrees

/org-crypt.el/ by John Wiegley and Peter Jones allows encryption
of individual subtrees in Org-mode outlines.  Thanks to John and
Peter for this contribution.

** Agenda: Support for including a link in the category string
    
The category (as specified by an #+CATEGORY line or CATEGORY
property can contain a bracket link.  While this sort-of worked
in the past, it now is officially supported and should cause no
problems in agenda display or update.  The link can be followed
by clicking on it, or with =C-c C-o 0=.

This was a request by Peter Westlake.

* Version 6.30
 :PROPERTIES:
 :CUSTOM_ID: v6.30
 :END:

** Inconsistent changes

*** Agenda now uses =f= and =b= to move through time

Up to now, the Org-mode agenda used the cursor keys =left= and
=right= to switch the agenda view forward an backward through
time.  However, many people found this confusing, and others
wanted to be able to do cursor motion in the agenda, for example
to select text.  Therefore, after an extensive discussion on
=emacs-orgmode@gnu.org=, it was decided to use the =b= and 
=f= keys instead, and to let the cursor keys do cursor motion
again.

*** Agenda follow mode is now on the =F= key

This was necessary to free up the =f= key, see above.

** Details

*** Maintenance

**** New command to submit a bug report

There is now a special command =M-x org-submit-bug-report=.  This
command will create a mail buffer with lots of useful details.
In particular, it contains complete version information for Emacs
and Org-mode.  It will also (if you agree to it) contain all
non-standard settings of org-mode and outline-mode related
variables.  Even if you do not sent your emails from within
Emacs, please still use this command to generate the information
and then copy it into your mail program.

The command will not generate and include a =*Backtrace*= buffer,
please do this yourself if you have hit an error.  For more
information, see the [[http://orgmode.org/manual/Feedback.html#Feedback][feedback section]] of the manual.

**** New contributed package org-track.el

This package allows to keep up-to-date with current Org
development, using only Emacs on-board means.  So if you don't
want or cannot use =git=, but still want to run the latest and
hottest Org-mode, this is for you.

Thanks to Sebastian Rose for this contribution.

*** Agenda

**** Agenda now uses =f= and =b= to move through time

Up to now, the Org-mode agenda used the cursor keys =left= and
=right= to switch the agenda view forward an backward through
time.  However, many people found this confusing, and others
wanted to be able to do cursor motion in the agenda, for example
to select text.  Therefore, after an extensive discussion on
=emacs-orgmode@gnu.org=, it was decided to use the =b= and 
=f= keys instead, and to let the cursor keys do cursor motion
again.

**** Agenda follow mode is now on the =F= key

This was necessary to free up the =f= key, see above.

**** The agenda can be put into a dedicated frame

When the variable =org-agenda-window-setup= has the value
=other-frame=, then the new frame created to show the agenda
will now have the window marked as /dedicated/.  As a
consequence, exiting the agenda while the agenda is the only
window on the frame will kill that frame.

This was a request by Henry Atting.

**** New mode to show some entry body text in the agenda

There is now a new agenda sub-mode called
=org-agenda-entry-text-mode=.  It is toggled with the =E= key.
When active, all entries in the agenda will be accompanied by a
few lines from the outline entry.  The amount of text can be
customized with the variable =org-agenda-entry-text-maxlines=.

This was a request by Anthony Fairchild, Manish, and others.

**** Improve following links from the agenda
    
=C-c C-o= in the agenda will now offer all links in the headline
and text of an entry.  If there is only a single link, it will be
followed immediately.

**** Avoid some duplicate entries

There is a new variable that can be used to avoid some duplicate
agenda entries: =org-agenda-skip-scheduled-if-deadline-is-shown=
If that is set, it avoids that an entry shows up in the agenda for
today for both a scheduling and a deadline entry.  See the
docstring of the variables for more details.

This partially addresses a request by Samuel Wales. 

**** Mark the running clock in the agenda.

If the entry currently being clocked is present in the agenda, it
will be highlighted with the face =org-agenda-clocking=.

This was a request by Rainer Stengele.


*** Export

**** Allow LaTeX export to use the listings package

The LaTeX =listings= package can now be used for formatting
fontified source code in many programming languages.  For more
information, see
http://thread.gmane.org/gmane.emacs.orgmode/16269 and
http://orgmode.org/worg/org-faq.php#fontified_source_code_w_latex

Thanks to Eric Schulte for this patch.

**** Remove table rows that only contain width and alignment markers
    
The width and alignment in table columns can be set with a cookie
like "<10>" or "<r>" or "<r10>".  In order to keep Org from
exporting such lines, the first column of a line should contain
only "/".  However, for convenience, there is now a special case:
If the entire row contains only such markers, the line will
automatically be discarded during export, even is the first
column is not "/".

**** Allow Macro calls to span several lines.

Macro calls may now span several lines, to write several
arguments in a cleaner way.  The result of a macro call can also
span several lines, by inserting the string "\n" (backslash
followed by n) into the value in the macro definition.

These were requests by Stefan Vollmar.

*** Misc

**** Quick access to all links in an entry

If =C-c C-o= is called while the cursor is in a headline, but not
directly on a link, then all links in the entry will be offered
in a small menu.  If there is only a single link, it will be
followed without a prompt.

**** Visibility Cycling: Allow to show all empty lines after a headline
    
=org-cycle-separator-lines= can now be set to a negative value,
to indicate that, if the number of empty lines before a visible
entry is greater than the specified number, then *all* empty
lines should be shown.

This was a request by "PT" whatever this means.

**** Allow language names to replace some strange major mode names

Sometimes a language uses a major mode which can't be guessed
from it's name.  There is now a new variable =org-src-lang-modes=
which can be used to map language names to major modes when this
is the case.  This is used when editing a source-code 
block, or when exporting fontified source-code with htmlize.

Thanks to Eric Schulte for a patch to this effect.

**** iswitchb support for many completion prompts
    
This is enabled using =org-completion-use-iswitchb=, and follows
the same model of usage as for ido users.

Thanks to John Wiegley for a patch to this effect.

**** New commands to set the effort property of an entry

There is now a special command, =C-c C-x e= to set the =Effort=
property of an entry.  From the agenda you can even use =e=.
If you have set up allowed values for the =Effort= property, then
using a prefix argument will directly select the nth allowed
value.  For example, in the agenda, =5 e= will select the 5th
allowed value.

This was a request by Michael Gilbert

**** Edit src works now better with killing buffer

Thanks to Dan Davison for a patch to this effect


* Older changes

  For older Changes, see [[file:Changes_old.org]]



* COMMENT Setup

#+STARTUP: showstars

#+TITLE: Org-mode list of user-visible changes
#+AUTHOR:  Carsten Dominik
#+EMAIL:  carsten at orgmode dot org
#+OPTIONS: H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:{} *:t TeX:t LaTeX:nil f:nil
#+INFOJS_OPT: view:info toc:1 path:org-info.js tdepth:2 ftoc:t
#+LINK_UP: index.html
#+LINK_HOME: http://orgmode.org
